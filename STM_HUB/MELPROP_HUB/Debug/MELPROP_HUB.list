
MELPROP_HUB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003000  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003208  08003208  00004208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003210  08003210  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003210  08003210  00004210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003214  08003214  00004214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003218  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003224  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003224  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086ba  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9a  00000000  00000000  0000d6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0000f390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000636  00000000  00000000  0000fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c5  00000000  00000000  00010236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a87f  00000000  00000000  000122fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb039  00000000  00000000  0001cb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  00107bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00109be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080031e0 	.word	0x080031e0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080031e0 	.word	0x080031e0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 800052e:	2300      	movs	r3, #0
 8000530:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 800054e:	2300      	movs	r3, #0
 8000550:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000552:	2300      	movs	r3, #0
 8000554:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000556:	2300      	movs	r3, #0
 8000558:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800055a:	2300      	movs	r3, #0
 800055c:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000562:	2308      	movs	r3, #8
 8000564:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800056a:	2300      	movs	r3, #0
 800056c:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800056e:	2300      	movs	r3, #0
 8000570:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000572:	2300      	movs	r3, #0
 8000574:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000576:	2300      	movs	r3, #0
 8000578:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000582:	2300      	movs	r3, #0
 8000584:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000586:	2300      	movs	r3, #0
 8000588:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800059e:	2300      	movs	r3, #0
 80005a0:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80005a2:	2308      	movs	r3, #8
 80005a4:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80005a6:	2300      	movs	r3, #0
 80005a8:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 80005ae:	f000 fa0f 	bl	80009d0 <MCP2515_Initialize>
 80005b2:	4603      	mov	r3, r0
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <CANSPI_Initialize+0x9a>
  {
    return false;
 80005be:	2300      	movs	r3, #0
 80005c0:	e05e      	b.n	8000680 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80005c2:	f000 fa27 	bl	8000a14 <MCP2515_SetConfigMode>
 80005c6:	4603      	mov	r3, r0
 80005c8:	f083 0301 	eor.w	r3, r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <CANSPI_Initialize+0xae>
  {
    return false;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e054      	b.n	8000680 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	461a      	mov	r2, r3
 80005da:	2123      	movs	r1, #35	@ 0x23
 80005dc:	2020      	movs	r0, #32
 80005de:	f000 fabd 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80005e2:	463b      	mov	r3, r7
 80005e4:	461a      	mov	r2, r3
 80005e6:	2127      	movs	r1, #39	@ 0x27
 80005e8:	2024      	movs	r0, #36	@ 0x24
 80005ea:	f000 fab7 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	461a      	mov	r2, r3
 80005f4:	2103      	movs	r1, #3
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fab0 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	461a      	mov	r2, r3
 8000602:	2107      	movs	r1, #7
 8000604:	2004      	movs	r0, #4
 8000606:	f000 faa9 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	461a      	mov	r2, r3
 8000610:	210b      	movs	r1, #11
 8000612:	2008      	movs	r0, #8
 8000614:	f000 faa2 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	461a      	mov	r2, r3
 800061e:	2113      	movs	r1, #19
 8000620:	2010      	movs	r0, #16
 8000622:	f000 fa9b 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	461a      	mov	r2, r3
 800062c:	2117      	movs	r1, #23
 800062e:	2014      	movs	r0, #20
 8000630:	f000 fa94 	bl	8000b5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	461a      	mov	r2, r3
 800063a:	211b      	movs	r1, #27
 800063c:	2018      	movs	r0, #24
 800063e:	f000 fa8d 	bl	8000b5c <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000642:	2104      	movs	r1, #4
 8000644:	2060      	movs	r0, #96	@ 0x60
 8000646:	f000 fa65 	bl	8000b14 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800064a:	2101      	movs	r1, #1
 800064c:	2070      	movs	r0, #112	@ 0x70
 800064e:	f000 fa61 	bl	8000b14 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000652:	2100      	movs	r1, #0
 8000654:	202a      	movs	r0, #42	@ 0x2a
 8000656:	f000 fa5d 	bl	8000b14 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800065a:	21e5      	movs	r1, #229	@ 0xe5
 800065c:	2029      	movs	r0, #41	@ 0x29
 800065e:	f000 fa59 	bl	8000b14 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000662:	2183      	movs	r1, #131	@ 0x83
 8000664:	2028      	movs	r0, #40	@ 0x28
 8000666:	f000 fa55 	bl	8000b14 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800066a:	f000 f9f1 	bl	8000a50 <MCP2515_SetNormalMode>
 800066e:	4603      	mov	r3, r0
 8000670:	f083 0301 	eor.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <CANSPI_Initialize+0x156>
    return false;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <CANSPI_Initialize+0x158>

  return true;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8000694:	4b36      	ldr	r3, [pc, #216]	@ (8000770 <CANSPI_Transmit+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <CANSPI_Transmit+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 80006a0:	4b33      	ldr	r3, [pc, #204]	@ (8000770 <CANSPI_Transmit+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 80006a6:	4b32      	ldr	r3, [pc, #200]	@ (8000770 <CANSPI_Transmit+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80006ac:	f000 fac4 	bl	8000c38 <MCP2515_ReadStatus>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <CANSPI_Transmit+0xec>)
 80006b6:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <CANSPI_Transmit+0xec>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d115      	bne.n	80006f2 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6858      	ldr	r0, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4a28      	ldr	r2, [pc, #160]	@ (8000770 <CANSPI_Transmit+0xe8>)
 80006d0:	4619      	mov	r1, r3
 80006d2:	f000 f928 	bl	8000926 <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3309      	adds	r3, #9
 80006de:	4924      	ldr	r1, [pc, #144]	@ (8000770 <CANSPI_Transmit+0xe8>)
 80006e0:	2040      	movs	r0, #64	@ 0x40
 80006e2:	f000 fa65 	bl	8000bb0 <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80006e6:	2081      	movs	r0, #129	@ 0x81
 80006e8:	f000 fa8c 	bl	8000c04 <MCP2515_RequestToSend>

    returnValue = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e038      	b.n	8000764 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <CANSPI_Transmit+0xec>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d115      	bne.n	800072c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6858      	ldr	r0, [r3, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <CANSPI_Transmit+0xe8>)
 800070a:	4619      	mov	r1, r3
 800070c:	f000 f90b 	bl	8000926 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a1a      	ldrb	r2, [r3, #8]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3309      	adds	r3, #9
 8000718:	4915      	ldr	r1, [pc, #84]	@ (8000770 <CANSPI_Transmit+0xe8>)
 800071a:	2042      	movs	r0, #66	@ 0x42
 800071c:	f000 fa48 	bl	8000bb0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000720:	2082      	movs	r0, #130	@ 0x82
 8000722:	f000 fa6f 	bl	8000c04 <MCP2515_RequestToSend>

    returnValue = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	e01b      	b.n	8000764 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <CANSPI_Transmit+0xec>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d114      	bne.n	8000764 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6858      	ldr	r0, [r3, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <CANSPI_Transmit+0xe8>)
 8000744:	4619      	mov	r1, r3
 8000746:	f000 f8ee 	bl	8000926 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a1a      	ldrb	r2, [r3, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3309      	adds	r3, #9
 8000752:	4907      	ldr	r1, [pc, #28]	@ (8000770 <CANSPI_Transmit+0xe8>)
 8000754:	2044      	movs	r0, #68	@ 0x44
 8000756:	f000 fa2b 	bl	8000bb0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800075a:	2084      	movs	r0, #132	@ 0x84
 800075c:	f000 fa52 	bl	8000c04 <MCP2515_RequestToSend>

    returnValue = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000002c 	.word	0x2000002c
 8000774:	20000028 	.word	0x20000028

08000778 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000784:	f000 fa74 	bl	8000c70 <MCP2515_GetRxStatus>
 8000788:	4603      	mov	r3, r0
 800078a:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 800078c:	7b3b      	ldrb	r3, [r7, #12]
 800078e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d066      	beq.n	8000866 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b40      	cmp	r3, #64	@ 0x40
 80007a2:	bf0c      	ite	eq
 80007a4:	2301      	moveq	r3, #1
 80007a6:	2300      	movne	r3, #0
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	7b3b      	ldrb	r3, [r7, #12]
 80007ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80007b4:	bf0c      	ite	eq
 80007b6:	2301      	moveq	r3, #1
 80007b8:	2300      	movne	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d007      	beq.n	80007d4 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	220d      	movs	r2, #13
 80007ca:	4619      	mov	r1, r3
 80007cc:	2090      	movs	r0, #144	@ 0x90
 80007ce:	f000 f97f 	bl	8000ad0 <MCP2515_ReadRxSequence>
 80007d2:	e00c      	b.n	80007ee <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80007d4:	7b3b      	ldrb	r3, [r7, #12]
 80007d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b80      	cmp	r3, #128	@ 0x80
 80007de:	d106      	bne.n	80007ee <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	220d      	movs	r2, #13
 80007e6:	4619      	mov	r1, r3
 80007e8:	2094      	movs	r0, #148	@ 0x94
 80007ea:	f000 f971 	bl	8000ad0 <MCP2515_ReadRxSequence>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80007ee:	7b3b      	ldrb	r3, [r7, #12]
 80007f0:	f003 0318 	and.w	r3, r3, #24
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b10      	cmp	r3, #16
 80007f8:	d10c      	bne.n	8000814 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2202      	movs	r2, #2
 80007fe:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000800:	7cb8      	ldrb	r0, [r7, #18]
 8000802:	7cf9      	ldrb	r1, [r7, #19]
 8000804:	7c3a      	ldrb	r2, [r7, #16]
 8000806:	7c7b      	ldrb	r3, [r7, #17]
 8000808:	f000 f832 	bl	8000870 <convertReg2ExtendedCANid>
 800080c:	4602      	mov	r2, r0
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	e00b      	b.n	800082c <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800081a:	7c3b      	ldrb	r3, [r7, #16]
 800081c:	7c7a      	ldrb	r2, [r7, #17]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f863 	bl	80008ec <convertReg2StandardCANid>
 8000826:	4602      	mov	r2, r0
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800082c:	7d3a      	ldrb	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000832:	7d7a      	ldrb	r2, [r7, #21]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000838:	7dba      	ldrb	r2, [r7, #22]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000844:	7e3a      	ldrb	r2, [r7, #24]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800084a:	7e7a      	ldrb	r2, [r7, #25]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000850:	7eba      	ldrb	r2, [r7, #26]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000856:	7efa      	ldrb	r2, [r7, #27]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800085c:	7f3a      	ldrb	r2, [r7, #28]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000866:	7ffb      	ldrb	r3, [r7, #31]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000870:	b490      	push	{r4, r7}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	4604      	mov	r4, r0
 8000878:	4608      	mov	r0, r1
 800087a:	4611      	mov	r1, r2
 800087c:	461a      	mov	r2, r3
 800087e:	4623      	mov	r3, r4
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	4603      	mov	r3, r0
 8000884:	71bb      	strb	r3, [r7, #6]
 8000886:	460b      	mov	r3, r1
 8000888:	717b      	strb	r3, [r7, #5]
 800088a:	4613      	mov	r3, r2
 800088c:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000896:	793b      	ldrb	r3, [r7, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800089e:	793b      	ldrb	r3, [r7, #4]
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80008a4:	797b      	ldrb	r3, [r7, #5]
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4413      	add	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4413      	add	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4413      	add	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4413      	add	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80008e0:	697b      	ldr	r3, [r7, #20]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc90      	pop	{r4, r7}
 80008ea:	4770      	bx	lr

080008ec <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	460a      	mov	r2, r1
 80008f6:	71fb      	strb	r3, [r7, #7]
 80008f8:	4613      	mov	r3, r2
 80008fa:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000906:	79bb      	ldrb	r3, [r7, #6]
 8000908:	095b      	lsrs	r3, r3, #5
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	4413      	add	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000918:	68fb      	ldr	r3, [r7, #12]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000926:	b480      	push	{r7}
 8000928:	b087      	sub	sp, #28
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	460b      	mov	r3, r1
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d12e      	bne.n	800099c <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	0a1b      	lsrs	r3, r3, #8
 8000958:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f023 031f 	bic.w	r3, r3, #31
 8000972:	b2da      	uxtb	r2, r3
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4413      	add	r3, r2
 8000978:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800097a:	7dfb      	ldrb	r3, [r7, #23]
 800097c:	3308      	adds	r3, #8
 800097e:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	f023 0314 	bic.w	r3, r3, #20
 8000986:	b2da      	uxtb	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800099a:	e013      	b.n	80009c4 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	015b      	lsls	r3, r3, #5
 80009ac:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	701a      	strb	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	371c      	adds	r7, #28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 80009d6:	2201      	movs	r2, #1
 80009d8:	2110      	movs	r1, #16
 80009da:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <MCP2515_Initialize+0x3c>)
 80009dc:	f000 ff4c 	bl	8001878 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 80009e0:	230a      	movs	r3, #10
 80009e2:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80009e4:	480a      	ldr	r0, [pc, #40]	@ (8000a10 <MCP2515_Initialize+0x40>)
 80009e6:	f002 f9bd 	bl	8002d64 <HAL_SPI_GetState>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d101      	bne.n	80009f4 <MCP2515_Initialize+0x24>
      return true;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e006      	b.n	8000a02 <MCP2515_Initialize+0x32>

    loop--;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f1      	bne.n	80009e4 <MCP2515_Initialize+0x14>

  return false;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	20000058 	.word	0x20000058

08000a14 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000a1a:	2180      	movs	r1, #128	@ 0x80
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	f000 f879 	bl	8000b14 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a22:	230a      	movs	r3, #10
 8000a24:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000a26:	200e      	movs	r0, #14
 8000a28:	f000 f830 	bl	8000a8c <MCP2515_ReadByte>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a32:	2b80      	cmp	r3, #128	@ 0x80
 8000a34:	d101      	bne.n	8000a3a <MCP2515_SetConfigMode+0x26>
      return true;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e006      	b.n	8000a48 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ef      	bne.n	8000a26 <MCP2515_SetConfigMode+0x12>

  return false;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000a56:	2100      	movs	r1, #0
 8000a58:	200f      	movs	r0, #15
 8000a5a:	f000 f85b 	bl	8000b14 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000a62:	200e      	movs	r0, #14
 8000a64:	f000 f812 	bl	8000a8c <MCP2515_ReadByte>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <MCP2515_SetNormalMode+0x26>
      return true;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e006      	b.n	8000a84 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1ef      	bne.n	8000a62 <MCP2515_SetNormalMode+0x12>

  return false;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000a96:	2200      	movs	r2, #0
 8000a98:	2110      	movs	r1, #16
 8000a9a:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MCP2515_ReadByte+0x40>)
 8000a9c:	f000 feec 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f901 	bl	8000ca8 <SPI_Tx>
  SPI_Tx(address);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f8fd 	bl	8000ca8 <SPI_Tx>
  retVal = SPI_Rx();
 8000aae:	f000 f921 	bl	8000cf4 <SPI_Rx>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2110      	movs	r1, #16
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MCP2515_ReadByte+0x40>)
 8000abc:	f000 fedc 	bl	8001878 <HAL_GPIO_WritePin>

  return retVal;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	480a      	ldr	r0, [pc, #40]	@ (8000b10 <MCP2515_ReadRxSequence+0x40>)
 8000ae6:	f000 fec7 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f8db 	bl	8000ca8 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	4619      	mov	r1, r3
 8000af6:	6838      	ldr	r0, [r7, #0]
 8000af8:	f000 f910 	bl	8000d1c <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000afc:	2201      	movs	r2, #1
 8000afe:	2110      	movs	r1, #16
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <MCP2515_ReadRxSequence+0x40>)
 8000b02:	f000 feb9 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <MCP2515_WriteByte+0x44>)
 8000b2a:	f000 fea5 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f000 f8ba 	bl	8000ca8 <SPI_Tx>
  SPI_Tx(address);
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f8b6 	bl	8000ca8 <SPI_Tx>
  SPI_Tx(data);
 8000b3c:	79bb      	ldrb	r3, [r7, #6]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f8b2 	bl	8000ca8 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000b44:	2201      	movs	r2, #1
 8000b46:	2110      	movs	r1, #16
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MCP2515_WriteByte+0x44>)
 8000b4a:	f000 fe95 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	603a      	str	r2, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2110      	movs	r1, #16
 8000b70:	480e      	ldr	r0, [pc, #56]	@ (8000bac <MCP2515_WriteByteSequence+0x50>)
 8000b72:	f000 fe81 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 f896 	bl	8000ca8 <SPI_Tx>
  SPI_Tx(startAddress);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f892 	bl	8000ca8 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000b84:	79ba      	ldrb	r2, [r7, #6]
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f000 f89a 	bl	8000ccc <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <MCP2515_WriteByteSequence+0x50>)
 8000b9e:	f000 fe6b 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <MCP2515_LoadTxSequence+0x50>)
 8000bc8:	f000 fe56 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f86a 	bl	8000ca8 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f000 f878 	bl	8000ccc <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f862 	bl	8000ca8 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	4619      	mov	r1, r3
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f86f 	bl	8000ccc <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <MCP2515_LoadTxSequence+0x50>)
 8000bf4:	f000 fe40 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000

08000c04 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2110      	movs	r1, #16
 8000c12:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <MCP2515_RequestToSend+0x30>)
 8000c14:	f000 fe30 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f844 	bl	8000ca8 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <MCP2515_RequestToSend+0x30>)
 8000c26:	f000 fe27 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2110      	movs	r1, #16
 8000c42:	480a      	ldr	r0, [pc, #40]	@ (8000c6c <MCP2515_ReadStatus+0x34>)
 8000c44:	f000 fe18 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8000c48:	20a0      	movs	r0, #160	@ 0xa0
 8000c4a:	f000 f82d 	bl	8000ca8 <SPI_Tx>
  retVal = SPI_Rx();
 8000c4e:	f000 f851 	bl	8000cf4 <SPI_Rx>
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c56:	2201      	movs	r2, #1
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <MCP2515_ReadStatus+0x34>)
 8000c5c:	f000 fe0c 	bl	8001878 <HAL_GPIO_WritePin>

  return retVal;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000c76:	2200      	movs	r2, #0
 8000c78:	2110      	movs	r1, #16
 8000c7a:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <MCP2515_GetRxStatus+0x34>)
 8000c7c:	f000 fdfc 	bl	8001878 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8000c80:	20b0      	movs	r0, #176	@ 0xb0
 8000c82:	f000 f811 	bl	8000ca8 <SPI_Tx>
  retVal = SPI_Rx();
 8000c86:	f000 f835 	bl	8000cf4 <SPI_Rx>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2110      	movs	r1, #16
 8000c92:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MCP2515_GetRxStatus+0x34>)
 8000c94:	f000 fdf0 	bl	8001878 <HAL_GPIO_WritePin>

  return retVal;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <SPI_Tx>:
  SPI_Tx(MCP2515_BIT_MOD);
  SPI_Tx(address);
}


static void SPI_Tx(uint8_t data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi4, &data, 1, HAL_MAX_DELAY);
 8000cb2:	1df9      	adds	r1, r7, #7
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <SPI_Tx+0x20>)
 8000cbc:	f001 fba1 	bl	8002402 <HAL_SPI_Transmit>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000058 	.word	0x20000058

08000ccc <SPI_TxBuffer>:
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&hspi4, buffer, length, HAL_MAX_DELAY);
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <SPI_TxBuffer+0x24>)
 8000ce4:	f001 fb8d 	bl	8002402 <HAL_SPI_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000058 	.word	0x20000058

08000cf4 <SPI_Rx>:
static uint8_t SPI_Rx(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Receive(&hspi4, &data, 1, HAL_MAX_DELAY);
 8000cfe:	1df9      	adds	r1, r7, #7
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2201      	movs	r2, #1
 8000d06:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <SPI_Rx+0x24>)
 8000d08:	f001 fce9 	bl	80026de <HAL_SPI_Receive>

	return data;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000058 	.word	0x20000058

08000d1c <SPI_RxBuffer>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(&hspi4, buffer, length, HAL_MAX_DELAY);
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <SPI_RxBuffer+0x24>)
 8000d34:	f001 fcd3 	bl	80026de <HAL_SPI_Receive>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000058 	.word	0x20000058

08000d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a39      	ldr	r2, [pc, #228]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b37      	ldr	r3, [pc, #220]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b34      	ldr	r3, [pc, #208]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a33      	ldr	r2, [pc, #204]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a27      	ldr	r2, [pc, #156]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <MX_GPIO_Init+0x100>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_NSS_GPIO_Port, SPI4_NSS_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4822      	ldr	r0, [pc, #136]	@ (8000e48 <MX_GPIO_Init+0x104>)
 8000dc0:	f000 fd5a 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2180      	movs	r1, #128	@ 0x80
 8000dc8:	4820      	ldr	r0, [pc, #128]	@ (8000e4c <MX_GPIO_Init+0x108>)
 8000dca:	f000 fd55 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_INT_Pin;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI4_INT_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4819      	ldr	r0, [pc, #100]	@ (8000e48 <MX_GPIO_Init+0x104>)
 8000de2:	f000 fb9d 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI4_NSS_Pin;
 8000de6:	2310      	movs	r3, #16
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_NSS_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <MX_GPIO_Init+0x104>)
 8000dfe:	f000 fb8f 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <MX_GPIO_Init+0x10c>)
 8000e1a:	f000 fb81 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_GPIO_Init+0x108>)
 8000e36:	f000 fb73 	bl	8001520 <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40020800 	.word	0x40020800

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 f9fb 	bl	8001252 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f870 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f7ff ff70 	bl	8000d44 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000e64:	f000 f8e4 	bl	8001030 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8000e68:	f7ff fb5e 	bl	8000528 <CANSPI_Initialize>
  txMessage.frame.data0 = 0;
 8000e6c:	4b32      	ldr	r3, [pc, #200]	@ (8000f38 <main+0xe4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	725a      	strb	r2, [r3, #9]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(CANSPI_Receive(&rxMessage))
 8000e72:	4832      	ldr	r0, [pc, #200]	@ (8000f3c <main+0xe8>)
 8000e74:	f7ff fc80 	bl	8000778 <CANSPI_Receive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d030      	beq.n	8000ee0 <main+0x8c>
	    {
	      txMessage.frame.idType = rxMessage.frame.idType;
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <main+0xe8>)
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <main+0xe4>)
 8000e84:	701a      	strb	r2, [r3, #0]
	      txMessage.frame.id = rxMessage.frame.id;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <main+0xe8>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000f38 <main+0xe4>)
 8000e8c:	6053      	str	r3, [r2, #4]
	      txMessage.frame.dlc = rxMessage.frame.dlc;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <main+0xe8>)
 8000e90:	7a1a      	ldrb	r2, [r3, #8]
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <main+0xe4>)
 8000e94:	721a      	strb	r2, [r3, #8]
	      txMessage.frame.data0++;
 8000e96:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <main+0xe4>)
 8000e98:	7a5b      	ldrb	r3, [r3, #9]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <main+0xe4>)
 8000ea0:	725a      	strb	r2, [r3, #9]
	      txMessage.frame.data1 = rxMessage.frame.data1;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <main+0xe8>)
 8000ea4:	7a9a      	ldrb	r2, [r3, #10]
 8000ea6:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <main+0xe4>)
 8000ea8:	729a      	strb	r2, [r3, #10]
	      txMessage.frame.data2 = rxMessage.frame.data2;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <main+0xe8>)
 8000eac:	7ada      	ldrb	r2, [r3, #11]
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <main+0xe4>)
 8000eb0:	72da      	strb	r2, [r3, #11]
	      txMessage.frame.data3 = rxMessage.frame.data3;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <main+0xe8>)
 8000eb4:	7b1a      	ldrb	r2, [r3, #12]
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <main+0xe4>)
 8000eb8:	731a      	strb	r2, [r3, #12]
	      txMessage.frame.data4 = rxMessage.frame.data4;
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <main+0xe8>)
 8000ebc:	7b5a      	ldrb	r2, [r3, #13]
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <main+0xe4>)
 8000ec0:	735a      	strb	r2, [r3, #13]
	      txMessage.frame.data5 = rxMessage.frame.data5;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <main+0xe8>)
 8000ec4:	7b9a      	ldrb	r2, [r3, #14]
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <main+0xe4>)
 8000ec8:	739a      	strb	r2, [r3, #14]
	      txMessage.frame.data6 = rxMessage.frame.data6;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <main+0xe8>)
 8000ecc:	7bda      	ldrb	r2, [r3, #15]
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <main+0xe4>)
 8000ed0:	73da      	strb	r2, [r3, #15]
	      txMessage.frame.data7 = rxMessage.frame.data7;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <main+0xe8>)
 8000ed4:	7c1a      	ldrb	r2, [r3, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <main+0xe4>)
 8000ed8:	741a      	strb	r2, [r3, #16]
	      CANSPI_Transmit(&txMessage);
 8000eda:	4817      	ldr	r0, [pc, #92]	@ (8000f38 <main+0xe4>)
 8000edc:	f7ff fbd4 	bl	8000688 <CANSPI_Transmit>
	    }

	    txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <main+0xe4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
	    txMessage.frame.id = 0x0B;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <main+0xe4>)
 8000ee8:	220b      	movs	r2, #11
 8000eea:	605a      	str	r2, [r3, #4]
	    txMessage.frame.dlc = 8;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <main+0xe4>)
 8000eee:	2208      	movs	r2, #8
 8000ef0:	721a      	strb	r2, [r3, #8]
	    txMessage.frame.data0 += 10;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <main+0xe4>)
 8000ef4:	7a5b      	ldrb	r3, [r3, #9]
 8000ef6:	330a      	adds	r3, #10
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <main+0xe4>)
 8000efc:	725a      	strb	r2, [r3, #9]
	    txMessage.frame.data1 = 1;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <main+0xe4>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	729a      	strb	r2, [r3, #10]
	    txMessage.frame.data2 = 2;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <main+0xe4>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	72da      	strb	r2, [r3, #11]
	    txMessage.frame.data3 = 3;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <main+0xe4>)
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	731a      	strb	r2, [r3, #12]
	    txMessage.frame.data4 = 4;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <main+0xe4>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	735a      	strb	r2, [r3, #13]
	    txMessage.frame.data5 = 5;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <main+0xe4>)
 8000f18:	2205      	movs	r2, #5
 8000f1a:	739a      	strb	r2, [r3, #14]
	    txMessage.frame.data6 = 6;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <main+0xe4>)
 8000f1e:	2206      	movs	r2, #6
 8000f20:	73da      	strb	r2, [r3, #15]
	    txMessage.frame.data7 = 220;
 8000f22:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <main+0xe4>)
 8000f24:	22dc      	movs	r2, #220	@ 0xdc
 8000f26:	741a      	strb	r2, [r3, #16]
	    CANSPI_Transmit(&txMessage);
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <main+0xe4>)
 8000f2a:	f7ff fbad 	bl	8000688 <CANSPI_Transmit>

	    HAL_Delay(1000);
 8000f2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f32:	f000 f9eb 	bl	800130c <HAL_Delay>
	    if(CANSPI_Receive(&rxMessage))
 8000f36:	e79c      	b.n	8000e72 <main+0x1e>
 8000f38:	20000030 	.word	0x20000030
 8000f3c:	20000044 	.word	0x20000044

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2234      	movs	r2, #52	@ 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 f91a 	bl	8003188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f64:	f000 fca2 	bl	80018ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <SystemClock_Config+0xdc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800101c <SystemClock_Config+0xdc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b29      	ldr	r3, [pc, #164]	@ (800101c <SystemClock_Config+0xdc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <SystemClock_Config+0xe0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f88:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <SystemClock_Config+0xe0>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <SystemClock_Config+0xe0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fa0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fb4:	2360      	movs	r3, #96	@ 0x60
 8000fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fccf 	bl	800196c <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd4:	f000 f826 	bl	8001024 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fd8:	f000 fc78 	bl	80018cc <HAL_PWREx_EnableOverDrive>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fe2:	f000 f81f 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2103      	movs	r1, #3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff60 	bl	8001ec8 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800100e:	f000 f809 	bl	8001024 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	@ 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <MX_SPI4_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_SPI4_Init+0x74>)
 800103c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_SPI4_Init+0x74>)
 800104a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800104e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_SPI4_Init+0x74>)
 800105e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001062:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001066:	2230      	movs	r2, #48	@ 0x30
 8001068:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_SPI4_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001070:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_SPI4_Init+0x74>)
 800107e:	2207      	movs	r2, #7
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_SPI4_Init+0x74>)
 800108a:	2208      	movs	r2, #8
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_SPI4_Init+0x74>)
 8001090:	f001 f90c 	bl	80022ac <HAL_SPI_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800109a:	f7ff ffc3 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000058 	.word	0x20000058
 80010a8:	40013400 	.word	0x40013400

080010ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_SPI_MspInit+0x7c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d127      	bne.n	800111e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_SPI_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	4a16      	ldr	r2, [pc, #88]	@ (800112c <HAL_SPI_MspInit+0x80>)
 80010d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_SPI_MspInit+0x80>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_SPI_MspInit+0x80>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_SPI_MspInit+0x80>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_SPI_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80010fe:	2364      	movs	r3, #100	@ 0x64
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800110e:	2305      	movs	r3, #5
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_SPI_MspInit+0x84>)
 800111a:	f000 fa01 	bl	8001520 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40013400 	.word	0x40013400
 800112c:	40023800 	.word	0x40023800
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <HAL_MspInit+0x44>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <HAL_MspInit+0x44>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <HAL_MspInit+0x44>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_MspInit+0x44>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_MspInit+0x44>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_MspInit+0x44>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f87b 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	@ (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	@ (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff ffd7 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f001 ffb3 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fe0f 	bl	8000e54 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001244:	08003218 	.word	0x08003218
  ldr r2, =_sbss
 8001248:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800124c:	200000c0 	.word	0x200000c0

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>

08001252 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001256:	2003      	movs	r0, #3
 8001258:	f000 f92e 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f805 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001262:	f7ff ff67 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f93b 	bl	8001506 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f911 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	200000bc 	.word	0x200000bc

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200000bc 	.word	0x200000bc

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	05fa0000 	.word	0x05fa0000

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff47 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff5c 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffb0 	bl	8001474 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e175      	b.n	800182c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 8164 	bne.w	8001826 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x56>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80be 	beq.w	8001826 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b66      	ldr	r3, [pc, #408]	@ (8001844 <HAL_GPIO_Init+0x324>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	4a65      	ldr	r2, [pc, #404]	@ (8001844 <HAL_GPIO_Init+0x324>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b6:	4b63      	ldr	r3, [pc, #396]	@ (8001844 <HAL_GPIO_Init+0x324>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016c2:	4a61      	ldr	r2, [pc, #388]	@ (8001848 <HAL_GPIO_Init+0x328>)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a58      	ldr	r2, [pc, #352]	@ (800184c <HAL_GPIO_Init+0x32c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d037      	beq.n	800175e <HAL_GPIO_Init+0x23e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a57      	ldr	r2, [pc, #348]	@ (8001850 <HAL_GPIO_Init+0x330>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d031      	beq.n	800175a <HAL_GPIO_Init+0x23a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a56      	ldr	r2, [pc, #344]	@ (8001854 <HAL_GPIO_Init+0x334>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d02b      	beq.n	8001756 <HAL_GPIO_Init+0x236>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a55      	ldr	r2, [pc, #340]	@ (8001858 <HAL_GPIO_Init+0x338>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d025      	beq.n	8001752 <HAL_GPIO_Init+0x232>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a54      	ldr	r2, [pc, #336]	@ (800185c <HAL_GPIO_Init+0x33c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01f      	beq.n	800174e <HAL_GPIO_Init+0x22e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a53      	ldr	r2, [pc, #332]	@ (8001860 <HAL_GPIO_Init+0x340>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x22a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	@ (8001864 <HAL_GPIO_Init+0x344>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x226>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a51      	ldr	r2, [pc, #324]	@ (8001868 <HAL_GPIO_Init+0x348>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x222>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a50      	ldr	r2, [pc, #320]	@ (800186c <HAL_GPIO_Init+0x34c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x21e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	@ (8001870 <HAL_GPIO_Init+0x350>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x21a>
 8001736:	2309      	movs	r3, #9
 8001738:	e012      	b.n	8001760 <HAL_GPIO_Init+0x240>
 800173a:	230a      	movs	r3, #10
 800173c:	e010      	b.n	8001760 <HAL_GPIO_Init+0x240>
 800173e:	2308      	movs	r3, #8
 8001740:	e00e      	b.n	8001760 <HAL_GPIO_Init+0x240>
 8001742:	2307      	movs	r3, #7
 8001744:	e00c      	b.n	8001760 <HAL_GPIO_Init+0x240>
 8001746:	2306      	movs	r3, #6
 8001748:	e00a      	b.n	8001760 <HAL_GPIO_Init+0x240>
 800174a:	2305      	movs	r3, #5
 800174c:	e008      	b.n	8001760 <HAL_GPIO_Init+0x240>
 800174e:	2304      	movs	r3, #4
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x240>
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x240>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x240>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x240>
 800175e:	2300      	movs	r3, #0
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001770:	4935      	ldr	r1, [pc, #212]	@ (8001848 <HAL_GPIO_Init+0x328>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177e:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <HAL_GPIO_Init+0x354>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017a2:	4a34      	ldr	r2, [pc, #208]	@ (8001874 <HAL_GPIO_Init+0x354>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a8:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <HAL_GPIO_Init+0x354>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017cc:	4a29      	ldr	r2, [pc, #164]	@ (8001874 <HAL_GPIO_Init+0x354>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017d2:	4b28      	ldr	r3, [pc, #160]	@ (8001874 <HAL_GPIO_Init+0x354>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001874 <HAL_GPIO_Init+0x354>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_GPIO_Init+0x354>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_GPIO_Init+0x354>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	f67f ae86 	bls.w	8001540 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40013800 	.word	0x40013800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40021000 	.word	0x40021000
 8001860:	40021400 	.word	0x40021400
 8001864:	40021800 	.word	0x40021800
 8001868:	40021c00 	.word	0x40021c00
 800186c:	40022000 	.word	0x40022000
 8001870:	40022400 	.word	0x40022400
 8001874:	40013c00 	.word	0x40013c00

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40007000 	.word	0x40007000

080018cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_PWREx_EnableOverDrive+0x98>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <HAL_PWREx_EnableOverDrive+0x98>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_PWREx_EnableOverDrive+0x98>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018fa:	f7ff fcfb 	bl	80012f4 <HAL_GetTick>
 80018fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001900:	e009      	b.n	8001916 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001902:	f7ff fcf7 	bl	80012f4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001910:	d901      	bls.n	8001916 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e022      	b.n	800195c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001922:	d1ee      	bne.n	8001902 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <HAL_PWREx_EnableOverDrive+0x9c>)
 800192a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800192e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff fce0 	bl	80012f4 <HAL_GetTick>
 8001934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001936:	e009      	b.n	800194c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001938:	f7ff fcdc 	bl	80012f4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001946:	d901      	bls.n	800194c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e007      	b.n	800195c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_PWREx_EnableOverDrive+0x9c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001958:	d1ee      	bne.n	8001938 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e29b      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8087 	beq.w	8001a9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001990:	4b96      	ldr	r3, [pc, #600]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b04      	cmp	r3, #4
 800199a:	d00c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199c:	4b93      	ldr	r3, [pc, #588]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d112      	bne.n	80019ce <HAL_RCC_OscConfig+0x62>
 80019a8:	4b90      	ldr	r3, [pc, #576]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019b4:	d10b      	bne.n	80019ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b6:	4b8d      	ldr	r3, [pc, #564]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d06c      	beq.n	8001a9c <HAL_RCC_OscConfig+0x130>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d168      	bne.n	8001a9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e275      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x7a>
 80019d8:	4b84      	ldr	r3, [pc, #528]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a83      	ldr	r2, [pc, #524]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e02e      	b.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x9c>
 80019ee:	4b7f      	ldr	r3, [pc, #508]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7e      	ldr	r2, [pc, #504]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b7c      	ldr	r3, [pc, #496]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7b      	ldr	r2, [pc, #492]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a12:	4b76      	ldr	r3, [pc, #472]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a75      	ldr	r2, [pc, #468]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b73      	ldr	r3, [pc, #460]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a72      	ldr	r2, [pc, #456]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xd8>
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b6c      	ldr	r3, [pc, #432]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc52 	bl	80012f4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fc4e 	bl	80012f4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e229      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b61      	ldr	r3, [pc, #388]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc3e 	bl	80012f4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fc3a 	bl	80012f4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e215      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b57      	ldr	r3, [pc, #348]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x110>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d069      	beq.n	8001b7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aaa:	4b50      	ldr	r3, [pc, #320]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x190>
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1e9      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	493d      	ldr	r1, [pc, #244]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e040      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d023      	beq.n	8001b4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b39      	ldr	r3, [pc, #228]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a38      	ldr	r2, [pc, #224]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff fbf0 	bl	80012f4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff fbec 	bl	80012f4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1c7      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2a:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4929      	ldr	r1, [pc, #164]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
 8001b4a:	e018      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a26      	ldr	r2, [pc, #152]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fbcc 	bl	80012f4 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff fbc8 	bl	80012f4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1a3      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d038      	beq.n	8001bfc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d019      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b96:	4a15      	ldr	r2, [pc, #84]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fba9 	bl	80012f4 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fba5 	bl	80012f4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e180      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x23a>
 8001bc4:	e01a      	b.n	8001bfc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bca:	4a08      	ldr	r2, [pc, #32]	@ (8001bec <HAL_RCC_OscConfig+0x280>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fb8f 	bl	80012f4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff fb8b 	bl	80012f4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d903      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e166      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
 8001bec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	4b92      	ldr	r3, [pc, #584]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a4 	beq.w	8001d52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a88      	ldr	r2, [pc, #544]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b86      	ldr	r3, [pc, #536]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4b83      	ldr	r3, [pc, #524]	@ (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c3e:	4b80      	ldr	r3, [pc, #512]	@ (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7f      	ldr	r2, [pc, #508]	@ (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb53 	bl	80012f4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fb4f 	bl	80012f4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b64      	cmp	r3, #100	@ 0x64
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e12a      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c64:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <HAL_RCC_OscConfig+0x4d4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x31a>
 8001c78:	4b70      	ldr	r3, [pc, #448]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	e02d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x376>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x33c>
 8001c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c92:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9a:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a67      	ldr	r2, [pc, #412]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	e01c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x376>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x35e>
 8001cb0:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb4:	4a61      	ldr	r2, [pc, #388]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x376>
 8001cca:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	4a5b      	ldr	r2, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd6:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	4a58      	ldr	r2, [pc, #352]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff fb03 	bl	80012f4 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff faff 	bl	80012f4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0d8      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ee      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x386>
 8001d14:	e014      	b.n	8001d40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff faed 	bl	80012f4 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fae9 	bl	80012f4 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0c2      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80ae 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d06d      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d14b      	bne.n	8001e08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a31      	ldr	r2, [pc, #196]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff faba 	bl	80012f4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fab6 	bl	80012f4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e091      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b29      	ldr	r3, [pc, #164]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	071b      	lsls	r3, r3, #28
 8001dce:	491b      	ldr	r1, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a18      	ldr	r2, [pc, #96]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fa88 	bl	80012f4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fa84 	bl	80012f4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e05f      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x47c>
 8001e06:	e057      	b.n	8001eb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fa6e 	bl	80012f4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff fa6a 	bl	80012f4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e045      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4b0>
 8001e3a:	e03d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x54c>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <HAL_RCC_OscConfig+0x558>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d030      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d129      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d122      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d119      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d10f      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0d0      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d910      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b67      	ldr	r3, [pc, #412]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	4965      	ldr	r1, [pc, #404]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b63      	ldr	r3, [pc, #396]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0b8      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f28:	4b59      	ldr	r3, [pc, #356]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a58      	ldr	r2, [pc, #352]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f40:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a52      	ldr	r2, [pc, #328]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b50      	ldr	r3, [pc, #320]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	494d      	ldr	r1, [pc, #308]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d040      	beq.n	8001fec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b47      	ldr	r3, [pc, #284]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e07f      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e073      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06b      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4936      	ldr	r1, [pc, #216]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fbc:	f7ff f99a 	bl	80012f4 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff f996 	bl	80012f4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e053      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fec:	4b27      	ldr	r3, [pc, #156]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d210      	bcs.n	800201c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b24      	ldr	r3, [pc, #144]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4922      	ldr	r1, [pc, #136]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b20      	ldr	r3, [pc, #128]	@ (800208c <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e032      	b.n	8002082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4916      	ldr	r1, [pc, #88]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	490e      	ldr	r1, [pc, #56]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205a:	f000 f821 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800205e:	4602      	mov	r2, r0
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	490a      	ldr	r1, [pc, #40]	@ (8002094 <HAL_RCC_ClockConfig+0x1cc>)
 800206c:	5ccb      	ldrb	r3, [r1, r3]
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_RCC_ClockConfig+0x1d0>)
 8002074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002076:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_ClockConfig+0x1d4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff f8f6 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	080031f8 	.word	0x080031f8
 8002098:	20000000 	.word	0x20000000
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a4:	b094      	sub	sp, #80	@ 0x50
 80020a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ac:	2300      	movs	r3, #0
 80020ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020b0:	2300      	movs	r3, #0
 80020b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b8:	4b79      	ldr	r3, [pc, #484]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x40>
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	f200 80e1 	bhi.w	800228c <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x34>
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d003      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x3a>
 80020d2:	e0db      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b73      	ldr	r3, [pc, #460]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80020d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020d8:	e0db      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020da:	4b73      	ldr	r3, [pc, #460]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80020dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020de:	e0d8      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e0:	4b6f      	ldr	r3, [pc, #444]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020ea:	4b6d      	ldr	r3, [pc, #436]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d063      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	2200      	movs	r2, #0
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	@ 0x34
 800210e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	f04f 0000 	mov.w	r0, #0
 800211a:	f04f 0100 	mov.w	r1, #0
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002124:	0150      	lsls	r0, r2, #5
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4621      	mov	r1, r4
 800212c:	1a51      	subs	r1, r2, r1
 800212e:	6139      	str	r1, [r7, #16]
 8002130:	4629      	mov	r1, r5
 8002132:	eb63 0301 	sbc.w	r3, r3, r1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002144:	4659      	mov	r1, fp
 8002146:	018b      	lsls	r3, r1, #6
 8002148:	4651      	mov	r1, sl
 800214a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214e:	4651      	mov	r1, sl
 8002150:	018a      	lsls	r2, r1, #6
 8002152:	4651      	mov	r1, sl
 8002154:	ebb2 0801 	subs.w	r8, r2, r1
 8002158:	4659      	mov	r1, fp
 800215a:	eb63 0901 	sbc.w	r9, r3, r1
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800216a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800216e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002172:	4690      	mov	r8, r2
 8002174:	4699      	mov	r9, r3
 8002176:	4623      	mov	r3, r4
 8002178:	eb18 0303 	adds.w	r3, r8, r3
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	462b      	mov	r3, r5
 8002180:	eb49 0303 	adc.w	r3, r9, r3
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002192:	4629      	mov	r1, r5
 8002194:	024b      	lsls	r3, r1, #9
 8002196:	4621      	mov	r1, r4
 8002198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800219c:	4621      	mov	r1, r4
 800219e:	024a      	lsls	r2, r1, #9
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021a6:	2200      	movs	r2, #0
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80021b0:	f7fe f842 	bl	8000238 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4613      	mov	r3, r2
 80021ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021bc:	e058      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021be:	4b38      	ldr	r3, [pc, #224]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	2200      	movs	r2, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	4611      	mov	r1, r2
 80021ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021ce:	623b      	str	r3, [r7, #32]
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021d8:	4642      	mov	r2, r8
 80021da:	464b      	mov	r3, r9
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0159      	lsls	r1, r3, #5
 80021e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ea:	0150      	lsls	r0, r2, #5
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4641      	mov	r1, r8
 80021f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021f6:	4649      	mov	r1, r9
 80021f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800220c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002210:	ebb2 040a 	subs.w	r4, r2, sl
 8002214:	eb63 050b 	sbc.w	r5, r3, fp
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	00eb      	lsls	r3, r5, #3
 8002222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002226:	00e2      	lsls	r2, r4, #3
 8002228:	4614      	mov	r4, r2
 800222a:	461d      	mov	r5, r3
 800222c:	4643      	mov	r3, r8
 800222e:	18e3      	adds	r3, r4, r3
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	464b      	mov	r3, r9
 8002234:	eb45 0303 	adc.w	r3, r5, r3
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002246:	4629      	mov	r1, r5
 8002248:	028b      	lsls	r3, r1, #10
 800224a:	4621      	mov	r1, r4
 800224c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002250:	4621      	mov	r1, r4
 8002252:	028a      	lsls	r2, r1, #10
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225a:	2200      	movs	r2, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	61fa      	str	r2, [r7, #28]
 8002260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002264:	f7fd ffe8 	bl	8000238 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4613      	mov	r3, r2
 800226e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	3301      	adds	r3, #1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800228e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002294:	4618      	mov	r0, r3
 8002296:	3750      	adds	r7, #80	@ 0x50
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	00f42400 	.word	0x00f42400
 80022a8:	007a1200 	.word	0x007a1200

080022ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e09d      	b.n	80023fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ce:	d009      	beq.n	80022e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
 80022d6:	e005      	b.n	80022e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fed4 	bl	80010ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800231a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002324:	d902      	bls.n	800232c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e002      	b.n	8002332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800232c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800233a:	d007      	beq.n	800234c <HAL_SPI_Init+0xa0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002344:	d002      	beq.n	800234c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	ea42 0103 	orr.w	r1, r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002396:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	f003 0204 	and.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_SPI_Transmit+0x22>
 8002420:	2302      	movs	r3, #2
 8002422:	e158      	b.n	80026d6 <HAL_SPI_Transmit+0x2d4>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800242c:	f7fe ff62 	bl	80012f4 <HAL_GetTick>
 8002430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d002      	beq.n	8002448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002446:	e13d      	b.n	80026c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_SPI_Transmit+0x52>
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002458:	e134      	b.n	80026c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a4:	d10f      	bne.n	80024c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d0:	2b40      	cmp	r3, #64	@ 0x40
 80024d2:	d007      	beq.n	80024e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80024ec:	d94b      	bls.n	8002586 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_Transmit+0xfa>
 80024f6:	8afb      	ldrh	r3, [r7, #22]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d13e      	bne.n	800257a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002520:	e02b      	b.n	800257a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b02      	cmp	r3, #2
 800252e:	d112      	bne.n	8002556 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	881a      	ldrh	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	1c9a      	adds	r2, r3, #2
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002554:	e011      	b.n	800257a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002556:	f7fe fecd 	bl	80012f4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d803      	bhi.n	800256e <HAL_SPI_Transmit+0x16c>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d102      	bne.n	8002574 <HAL_SPI_Transmit+0x172>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002578:	e0a4      	b.n	80026c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ce      	bne.n	8002522 <HAL_SPI_Transmit+0x120>
 8002584:	e07c      	b.n	8002680 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_Transmit+0x192>
 800258e:	8afb      	ldrh	r3, [r7, #22]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d170      	bne.n	8002676 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d912      	bls.n	80025c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ae:	1c9a      	adds	r2, r3, #2
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b02      	subs	r3, #2
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025c2:	e058      	b.n	8002676 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	7812      	ldrb	r2, [r2, #0]
 80025d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80025ea:	e044      	b.n	8002676 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d12b      	bne.n	8002652 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d912      	bls.n	800262a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	881a      	ldrh	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002614:	1c9a      	adds	r2, r3, #2
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b02      	subs	r3, #2
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002628:	e025      	b.n	8002676 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002650:	e011      	b.n	8002676 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002652:	f7fe fe4f 	bl	80012f4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d803      	bhi.n	800266a <HAL_SPI_Transmit+0x268>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d102      	bne.n	8002670 <HAL_SPI_Transmit+0x26e>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002674:	e026      	b.n	80026c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1b5      	bne.n	80025ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	6839      	ldr	r1, [r7, #0]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 fd15 	bl	80030b4 <SPI_EndRxTxTransaction>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	77fb      	strb	r3, [r7, #31]
 80026c0:	e000      	b.n	80026c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80026c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b088      	sub	sp, #32
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026fa:	d112      	bne.n	8002722 <HAL_SPI_Receive+0x44>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10e      	bne.n	8002722 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2204      	movs	r2, #4
 8002708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800270c:	88fa      	ldrh	r2, [r7, #6]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f910 	bl	800293e <HAL_SPI_TransmitReceive>
 800271e:	4603      	mov	r3, r0
 8002720:	e109      	b.n	8002936 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_SPI_Receive+0x52>
 800272c:	2302      	movs	r3, #2
 800272e:	e102      	b.n	8002936 <HAL_SPI_Receive+0x258>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002738:	f7fe fddc 	bl	80012f4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d002      	beq.n	8002750 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800274e:	e0e9      	b.n	8002924 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_SPI_Receive+0x7e>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002760:	e0e0      	b.n	8002924 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2204      	movs	r2, #4
 8002766:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027ac:	d908      	bls.n	80027c0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e007      	b.n	80027d0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d8:	d10f      	bne.n	80027fa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002804:	2b40      	cmp	r3, #64	@ 0x40
 8002806:	d007      	beq.n	8002818 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002820:	d867      	bhi.n	80028f2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002822:	e030      	b.n	8002886 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d117      	bne.n	8002862 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f103 020c 	add.w	r2, r3, #12
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002860:	e011      	b.n	8002886 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002862:	f7fe fd47 	bl	80012f4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d803      	bhi.n	800287a <HAL_SPI_Receive+0x19c>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d102      	bne.n	8002880 <HAL_SPI_Receive+0x1a2>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002884:	e04e      	b.n	8002924 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1c8      	bne.n	8002824 <HAL_SPI_Receive+0x146>
 8002892:	e034      	b.n	80028fe <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d115      	bne.n	80028ce <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	b292      	uxth	r2, r2
 80028ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	1c9a      	adds	r2, r3, #2
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80028cc:	e011      	b.n	80028f2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ce:	f7fe fd11 	bl	80012f4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d803      	bhi.n	80028e6 <HAL_SPI_Receive+0x208>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d102      	bne.n	80028ec <HAL_SPI_Receive+0x20e>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028f0:	e018      	b.n	8002924 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ca      	bne.n	8002894 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	6839      	ldr	r1, [r7, #0]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fb5a 	bl	8002fbc <SPI_EndRxTransaction>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
 8002920:	e000      	b.n	8002924 <HAL_SPI_Receive+0x246>
  }

error :
 8002922:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	@ 0x28
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x26>
 8002960:	2302      	movs	r3, #2
 8002962:	e1fb      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x41e>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296c:	f7fe fcc2 	bl	80012f4 <HAL_GetTick>
 8002970:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002978:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002988:	7efb      	ldrb	r3, [r7, #27]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d00e      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x6e>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002994:	d106      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x66>
 800299e:	7efb      	ldrb	r3, [r7, #27]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d003      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80029aa:	e1cd      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_SPI_TransmitReceive+0x80>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_SPI_TransmitReceive+0x80>
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80029c4:	e1c0      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2205      	movs	r2, #5
 80029d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	887a      	ldrh	r2, [r7, #2]
 8002a06:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a1c:	d802      	bhi.n	8002a24 <HAL_SPI_TransmitReceive+0xe6>
 8002a1e:	8a3b      	ldrh	r3, [r7, #16]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d908      	bls.n	8002a36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	e007      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b40      	cmp	r3, #64	@ 0x40
 8002a52:	d007      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a6c:	d97c      	bls.n	8002b68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_SPI_TransmitReceive+0x13e>
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d169      	bne.n	8002b50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8c:	1c9a      	adds	r2, r3, #2
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa0:	e056      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11b      	bne.n	8002ae8 <HAL_SPI_TransmitReceive+0x1aa>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0x1aa>
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d113      	bne.n	8002ae8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	881a      	ldrh	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	1c9a      	adds	r2, r3, #2
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d11c      	bne.n	8002b30 <HAL_SPI_TransmitReceive+0x1f2>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b30:	f7fe fbe0 	bl	80012f4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d807      	bhi.n	8002b50 <HAL_SPI_TransmitReceive+0x212>
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d003      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8002b4e:	e0fb      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1a3      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x164>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d19d      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x164>
 8002b66:	e0df      	b.n	8002d28 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x23a>
 8002b70:	8a7b      	ldrh	r3, [r7, #18]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 80cb 	bne.w	8002d0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d912      	bls.n	8002ba8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b02      	subs	r3, #2
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ba6:	e0b2      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	7812      	ldrb	r2, [r2, #0]
 8002bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bce:	e09e      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d134      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x30a>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02f      	beq.n	8002c48 <HAL_SPI_TransmitReceive+0x30a>
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d12c      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d912      	bls.n	8002c1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	1c9a      	adds	r2, r3, #2
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b02      	subs	r3, #2
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c1c:	e012      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	7812      	ldrb	r2, [r2, #0]
 8002c2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d148      	bne.n	8002ce8 <HAL_SPI_TransmitReceive+0x3aa>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d042      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d923      	bls.n	8002cb6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b02      	subs	r3, #2
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d81f      	bhi.n	8002ce4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	e016      	b.n	8002ce4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f103 020c 	add.w	r2, r3, #12
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ce8:	f7fe fb04 	bl	80012f4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d803      	bhi.n	8002d00 <HAL_SPI_TransmitReceive+0x3c2>
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d102      	bne.n	8002d06 <HAL_SPI_TransmitReceive+0x3c8>
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8002d0c:	e01c      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af5b 	bne.w	8002bd0 <HAL_SPI_TransmitReceive+0x292>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f af54 	bne.w	8002bd0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f9c1 	bl	80030b4 <SPI_EndRxTxTransaction>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d44:	e000      	b.n	8002d48 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3728      	adds	r7, #40	@ 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d90:	f7fe fab0 	bl	80012f4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002da0:	f7fe faa8 	bl	80012f4 <HAL_GetTick>
 8002da4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002da6:	4b39      	ldr	r3, [pc, #228]	@ (8002e8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	015b      	lsls	r3, r3, #5
 8002dac:	0d1b      	lsrs	r3, r3, #20
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002db6:	e054      	b.n	8002e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d050      	beq.n	8002e62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dc0:	f7fe fa98 	bl	80012f4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d902      	bls.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d13d      	bne.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002de4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dee:	d111      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002df8:	d004      	beq.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e02:	d107      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e1c:	d10f      	bne.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e017      	b.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d19b      	bne.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000

08002e90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ea2:	f7fe fa27 	bl	80012f4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002eb2:	f7fe fa1f 	bl	80012f4 <HAL_GetTick>
 8002eb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00da      	lsls	r2, r3, #3
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	0d1b      	lsrs	r3, r3, #20
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ed8:	e060      	b.n	8002f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ee0:	d107      	bne.n	8002ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d050      	beq.n	8002f9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002efa:	f7fe f9fb 	bl	80012f4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d902      	bls.n	8002f10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d13d      	bne.n	8002f8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f28:	d111      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f32:	d004      	beq.n	8002f3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3c:	d107      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f56:	d10f      	bne.n	8002f78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e010      	b.n	8002fae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d196      	bne.n	8002eda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3728      	adds	r7, #40	@ 0x28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000000 	.word	0x20000000

08002fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd0:	d111      	bne.n	8002ff6 <SPI_EndRxTransaction+0x3a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fda:	d004      	beq.n	8002fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe4:	d107      	bne.n	8002ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ffe:	d112      	bne.n	8003026 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2200      	movs	r2, #0
 8003008:	2180      	movs	r1, #128	@ 0x80
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff feb8 	bl	8002d80 <SPI_WaitFlagStateUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d021      	beq.n	800305a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e03d      	b.n	80030a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003026:	4b21      	ldr	r3, [pc, #132]	@ (80030ac <SPI_EndRxTransaction+0xf0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a21      	ldr	r2, [pc, #132]	@ (80030b0 <SPI_EndRxTransaction+0xf4>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	0d5b      	lsrs	r3, r3, #21
 8003032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3b01      	subs	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003052:	2b80      	cmp	r3, #128	@ 0x80
 8003054:	d0f2      	beq.n	800303c <SPI_EndRxTransaction+0x80>
 8003056:	e000      	b.n	800305a <SPI_EndRxTransaction+0x9e>
        break;
 8003058:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003062:	d11d      	bne.n	80030a0 <SPI_EndRxTransaction+0xe4>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800306c:	d004      	beq.n	8003078 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003076:	d113      	bne.n	80030a0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff ff03 	bl	8002e90 <SPI_WaitFifoStateUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e000      	b.n	80030a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000000 	.word	0x20000000
 80030b0:	165e9f81 	.word	0x165e9f81

080030b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fedf 	bl	8002e90 <SPI_WaitFifoStateUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e046      	b.n	8003176 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <SPI_EndRxTxTransaction+0xcc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a25      	ldr	r2, [pc, #148]	@ (8003184 <SPI_EndRxTxTransaction+0xd0>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0d5b      	lsrs	r3, r3, #21
 80030f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003106:	d112      	bne.n	800312e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2200      	movs	r2, #0
 8003110:	2180      	movs	r1, #128	@ 0x80
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff fe34 	bl	8002d80 <SPI_WaitFlagStateUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e023      	b.n	8003176 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3b01      	subs	r3, #1
 8003138:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003144:	2b80      	cmp	r3, #128	@ 0x80
 8003146:	d0f2      	beq.n	800312e <SPI_EndRxTxTransaction+0x7a>
 8003148:	e000      	b.n	800314c <SPI_EndRxTxTransaction+0x98>
        break;
 800314a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fe99 	bl	8002e90 <SPI_WaitFifoStateUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e000      	b.n	8003176 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000000 	.word	0x20000000
 8003184:	165e9f81 	.word	0x165e9f81

08003188 <memset>:
 8003188:	4402      	add	r2, r0
 800318a:	4603      	mov	r3, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <memset+0xa>
 8003190:	4770      	bx	lr
 8003192:	f803 1b01 	strb.w	r1, [r3], #1
 8003196:	e7f9      	b.n	800318c <memset+0x4>

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	4d0d      	ldr	r5, [pc, #52]	@ (80031d0 <__libc_init_array+0x38>)
 800319c:	4c0d      	ldr	r4, [pc, #52]	@ (80031d4 <__libc_init_array+0x3c>)
 800319e:	1b64      	subs	r4, r4, r5
 80031a0:	10a4      	asrs	r4, r4, #2
 80031a2:	2600      	movs	r6, #0
 80031a4:	42a6      	cmp	r6, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	4d0b      	ldr	r5, [pc, #44]	@ (80031d8 <__libc_init_array+0x40>)
 80031aa:	4c0c      	ldr	r4, [pc, #48]	@ (80031dc <__libc_init_array+0x44>)
 80031ac:	f000 f818 	bl	80031e0 <_init>
 80031b0:	1b64      	subs	r4, r4, r5
 80031b2:	10a4      	asrs	r4, r4, #2
 80031b4:	2600      	movs	r6, #0
 80031b6:	42a6      	cmp	r6, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c0:	4798      	blx	r3
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	4798      	blx	r3
 80031cc:	3601      	adds	r6, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08003210 	.word	0x08003210
 80031d4:	08003210 	.word	0x08003210
 80031d8:	08003210 	.word	0x08003210
 80031dc:	08003214 	.word	0x08003214

080031e0 <_init>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	bf00      	nop
 80031e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e6:	bc08      	pop	{r3}
 80031e8:	469e      	mov	lr, r3
 80031ea:	4770      	bx	lr

080031ec <_fini>:
 80031ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ee:	bf00      	nop
 80031f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f2:	bc08      	pop	{r3}
 80031f4:	469e      	mov	lr, r3
 80031f6:	4770      	bx	lr
